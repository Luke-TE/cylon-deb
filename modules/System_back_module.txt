#!/bin/bash
#Module containing functions called from cylon package
#Functions: SystemBackFunc

#FUNCTION HEADER
# NAME :          SystemBackFunc
# DESCRIPTION:carries out Full system backup + gdrive sync 
#to google drive
# INPUTS:  configfile from readconfigFunc   
# OUTPUTS : backups see Options array
# PROCESS : system backup(5 options) + option to call gdriveFunc  +rsync option
#NOTES :    needs rsync installed if using rsync option

function SystemBackFunc
{
			#get paths from config file if exists
			clear
			readconfigFunc
			#get user input for backup
			local optionsBUArr=("$Destination1" "$Destination2" "$DEST3" \
			"Custom" "$(checkPacFunc "gdrive" NOMES)" "$(checkPacFunc "rsync" NOMES)" "Return")
			#variable to be passed to makeDirFunc : custom path
			local D3Var=""
			local choiceBUVar=""
			msgFunc blue "Pick Destination directory for system backup or gdrive option"
			select  choiceBUVar in "${optionsBUArr[@]}"
			#check that paths exist and change path to DEST path
			do
			case "$choiceBUVar" in
			
			"${optionsBUArr[0]}")  cd "$Destination1" || exitHandlerFunc DEST1 
											D3Var="1";;				
			"${optionsBUArr[1]}")  cd "$Destination2"   || exitHandlerFunc DEST2 
											D3Var="1";;
			"${optionsBUArr[2]}")  cd "$DEST3" || exitHandlerFunc DEST3;;
			"${optionsBUArr[3]}")  #custom path read in 
						#msgFunc norm "Type a custom DESTination path:-"
						#read -r Path1		
						local Path1Var=""
						Path1Var=$(dialog --title "Custom backup" --output-fd 1 --begin 1 1 --cancel-label "Exit" --title  "Select Directory path for custom backup" --dselect / 10 40) 
						case $? in
							0)
								clear
								msgFunc norm " "
								msgFunc 	norm "\"$Path1Var\" chosen directory."
							;;
							1)
								clear
								msgFunc norm " "
								msgFunc yellow "Exit pressed."
								return
							;;
							255)
								clear
								msgFunc norm " "
								msgFunc yellow "Esc pressed."
								return
							;;
						esac
						cd "$Path1Var" || exitHandlerFunc DEST4 
						D3Var="1"
						;;
			"${optionsBUArr[4]}")   #gdrive function
					#check gdrive is installed
					gdriveFunc
					return
					;;
			"${optionsBUArr[5]}") 
					msgFunc green "rsync backup utility"
					#check rsync is installed
					if ! checkPacFunc rsync 
					then
						msgFunc anykey 
					return
					fi
					msgFunc norm "Source: $rsyncsource"
					msgFunc norm "Destination: $rsyncDest"
					msgFunc anykey
					rsync -av --delete "$rsyncsource" "$rsyncDest" 
					msgFunc green "Done!"
					msgFunc anykey
					return ;;	
			*) return ;;
			esac
			break
			done
			
			#make the backup directory pass D3Var binary value to skip cd
			makeDirFunc "-BACKUP" "$D3Var"
			#begin the backup get user choice from user to what to back up
			local choiceBu2Var=""
			local optionsBu2Arr=("Copy of 1st 512 bytes MBR" "Copy of etc dir" \
"Copy of home dir" "Copy of package lists" "Make tarball of all" "ALL" "Return")
			msgFunc blue "Pick a Backup option:-"
			select  choiceBu2Var in "${optionsBu2Arr[@]}"
			do
			case  "$choiceBu2Var" in
			"${optionsBu2Arr[0]}"|"${optionsBu2Arr[5]}") #MBR
				msgFunc green "Make copy of first 512 bytes MBR with dd"
				#get /dev/sdxy where currenty filesystem is mounted 
				local myddpathVar=""
				myddpathVar="$(df /boot/ --output=source | tail -1)"
				msgFunc norm "$myddpathVar"
				sudo dd if="$myddpathVar" of=hda-mbr.bin bs=512 count=1
				msgFunc green "Done!"
			;;&
			"${optionsBu2Arr[1]}"|"${optionsBu2Arr[5]}")#etc
				msgFunc green "Make a copy of etc dir"
				sudo cp -a -v -u /etc .
				msgFunc green "Done!"
			;;&
			"${optionsBu2Arr[2]}"|"${optionsBu2Arr[5]}")#home
				msgFunc green "Make a copy of home dir"
				sudo cp -a -v -u /home .
				msgFunc green "Done!"
				sync
			;;&
			"${optionsBu2Arr[3]}"|"${optionsBu2Arr[5]}")#packages
				#pass Backup to pkglistFunc to not create directory
				pkglistFunc "Backup"
			;;&
			"${optionsBu2Arr[4]}"|"${optionsBu2Arr[5]}")#tar
				msgFunc green "Make tarball of all except tmp dev proc sys run"
				sudo tar --one-file-system --exclude=/tmp/* --exclude=/dev/* --exclude=/proc/* --exclude=/sys/* --exclude=/run/* -pzcvf RootFS_backup.tar.gz /
				msgFunc green "Done!"
				sync 
			;;&
			*)#quit
				msgFunc green "ALL Done!"
				return
			;;
			esac
			break 
			done
}
