#!/bin/bash
#Module containing functions called from cylon package
#Functions: 	debupdateFunc, pkglistFunc,updateFunc,checkPacFunc 

#FUNCTION HEADER
# NAME : 	debupdateFunc
# DESCRIPTION : debian  manager options
# PROCESS : See options array      
#NOTE gnu-netcat is neeeded for the first option.      
function 	debupdateFunc
{
		clear
		   #Pacman package manager options:
		   msgFunc line
		   msgFunc green "Updates" 
		   msgFunc line
		   msgFunc blue "Update  options:-"
			options=("Check for updates (no download), aptitude search '~U'" "Upgrade all, apt-get update && apt-get dist-upgrade" \
			 "Display info about a package, apt-cache show " "Install Package, apt install" \
			 "Search for packages in the database, apt search" \
			 "Delete Package, apt remove" "Search for already installed packages, aptitude search '~i'" \
			 "Display  info for locally installed packages, dpkg -s" "List all files owned by a given package, dpkg -L " \
			 "Clean up all local cache, apt-get autoclean "\
			 "Write installed package lists to files" "Remove all packages not required as dependencies), apt-get autoremove " \
			  "Return to main menu")
			select choicep in "${options[@]}"
			do
			case "$choicep" in
					"${options[0]}")
					msgFunc green "Updates ready:-.... "
						msgFunc norm   "Number of  updates ready...> $(aptitude search '~U' | wc -l)"
						aptitude search '~U' 
					;;
					"${options[1]}") #update system
						msgFunc green "Update system "
						sudo apt-get update  && sudo apt-get dist-upgrade
					;;
					"${options[2]}") # Display extensive information about a given package
						msgFunc green "Display information  for Package."
						msgFunc norm "Please enter package name"
						read -r pacString
                        apt-cache show  "$pacString"
					;;
					"${options[3]}") # Install Package
						msgFunc green "Install package."
						msgFunc norm "Please enter package name"
						read -r pacString
                        sudo apt install "$pacString"
					;;
					"${options[4]}")   #Search Repos for Package
						msgFunc green "Search for packages in the database."
						msgFunc norm "Please enter package name"
						read -r pacString
                         apt search "$pacString"
					;;
					"${options[5]}") #Delete Package
						msgFunc green "Delete Package."
						msgFunc norm "Please enter package name"
						read -r pacString
                        sudo apt-get remove "$pacString"
					;;
					"${options[6]}")   #Search for already installed packages
						msgFunc green "Search for already installed packages."
						msgFunc norm "Please enter package name"
						read -r pacString
                        aptitude search "~i(~n "$pacString"|~d "$pacString")"

					;;
					"${options[7]}") #Display extensive information about a given package(local install)
						msgFunc green "Display information  for Package."
						msgFunc norm "Please enter package name"
						read -r pacString
                        dpkg -s "$pacString"
					;;
					"${options[8]}") #List all files owned by a given package.
						msgFunc green "List all files owned by a given package."
						msgFunc norm "Please enter package name"
						read -r pacString
                         dpkg -L "$pacString"
					;;
					
					"${options[9]}")  msgFunc green  "Clean up all local cache."
					#Clean up all local caches. 
					#Autoclean removes only unneeded, obsolete information. 
					sudo  apt-get autoclean 
					;;
					"${options[10]}")msgFunc green "Writing installed package lists to files at :"
						pkglistFunc
					;;
					"${options[11]}")   #delete orphans
						msgFunc green "Delete orphans!"
						#Remove all packages not required as dependencies (orphans)
						sudo  apt-get autoremove 
					;;
				
						*)  #exit  
						msgFunc green "Done!"	
						return
						;;
			esac
			break
			done
			msgFunc green "Done!"	
			msgFunc anykey 
}


#FUNCTION HEADER
# NAME :            pkglistFunc
#INPUT $1 Backup if called from backup do not create directory
# DESCRIPTION :creates a copy of packages list see below.


function pkglistFunc
{
				msgFunc green "Making a copy of package lists "
				#check for input if Backup called from backup do not create dir
				if [ "$1" != "Backup" ]
				then
					makeDirFunc "-PKGINFO"
				fi
				
						#all packages 
						dpkg -l   > All_PKG.txt
						#native, explicitly installed package
						apt-mark showmanual > Exp_PKG.txt
						#foreign installed (AUR etc))
						deborphan > ForPKG.txt
}

##FUNCTION HEADER
# NAME :  updatefunc
# DESCRIPTION: called from checkinputfunc or main menu.
function updateFunc
{
		clear
		msgFunc yellow n/a
		msgFunc anykey
		msgFunc line
}

#FUNCTION HEADER
# NAME : checkPacFunc
#DESCRIPTION : Checks if package installed 
#PROCESS: check if package(passed $1) installed if NOMES passed 
#as $2 goto menu display mode and appends passed $3
#NOMES =no message
# INPUTS : $1(package $2(NOMES flag) or (append text))
#OUTPUTS: returns 0 for installed 1 for not installed    
function checkPacFunc
{
	local pacVar=""
	pacVar=$(dpkg -l "$1" 2> /dev/null)
	if [ -n "$pacVar" ]
	then #installed
		#if text input is NOMES skip install good message
		if [ "$2" = "NOMES" ] 
		then 
			printf '%s' "$1"
		else
			printf '%s\n' "$1 is Installed $2"
		fi
		return 0
	else #not installed
		#if text input is NOMES skip install bad message
		if [ "$2" = "NOMES" ] 
		then
			printf '%s' "$1 n/a"
		else
			printf '%s\n' "${RED}$1 is Not installed${NORMAL} $2"
		fi
		return 1
	fi 
}
