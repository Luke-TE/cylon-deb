#!/bin/bash
#module containing functions called from cylon package
#Functions: checkinputFunc, DisplayFunc.
# exitHandlerFunc, HelpFunc, msgFunc, readconfigFunc, weatherFunc, makeDir

#FUNCTION HEADER
# NAME : msgFunc
# DESCRIPTION :   prints to screen
#prints line, text and anykey prompts, yesno prompt
# INPUTS : $1 process name $2 text input
# PROCESS :[1]  print line [2] anykey prompt
# [3] print text  "green , red ,blue , norm yellow and highlight" [4] yn prompt, 
# OUTPUT yesno prompt return 1 or 0                       
function msgFunc
{
	case "$1" in 
	
		line) #print blue horizontal line of =
			printf '\033[36;1m%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
			msgFunc norm
		;;
		anykey) #any key prompt, appends second text input to prompt
		    printf '%s' "${GREEN}" 
			read -n 1 -r -s -p "Press any key to continue $2"
			printf '%s\n' "${NORMAL}"
		;;
		
		#print passed text string
		green) printf '%s\n' "${GREEN}$2${NORMAL}" ;;
		red) printf '%s\n' "${RED}$2${NORMAL}" ;;
		blue) printf '%s\n' "${BLUE}$2${NORMAL}" ;;
		yellow)printf '%s\n' "${YELLOW}$2${NORMAL}" ;;
		highlight)printf '%s\n' "${HL}$2${NORMAL}" ;;
		
		norm) #print normal text colour
			if [ "$2" = "" ]
				then
				#just change colour to norm if no text sent
					printf '%s' "${NORMAL}"
				return
			fi
			printf '%s\n' "${NORMAL}$2" ;;
			
		yesno) #print yes no quit prompt
			local yesnoVar=""
			while true; do
				read -r yesnoVar
				case $yesnoVar in
					[Yy]*) return 0;;
					[Nn]*) return 1;;
					[Qq]*) exitHandlerFunc exitout;;
					*) printf '%s\n' "${YELLOW}Please answer: (y/Y for yes) OR (n/N for no) OR (q/Q to quit)!${NORMAL}";;
				esac
			done
		;;
		*) 
			printf '%s\n' "ERROR unknown input to msgFunc"
			 ;;
	esac
}


#FUNCTION HEADER
# NAME :  exitHandlerFunc 
# DESCRIPTION: error handler deal with user 
#exists and path not found errors and internet failure 
# INPUTS:  $2 text of internet site down or filename
# PROCESS : exitout DEST 1-6 netdown or file error
function exitHandlerFunc
{
	#double square brackets without use of quotes on matching pattern 
	#for glob support
	if [[ "$1" = DEST* ]]
	then
		msgFunc red "Path not found to Destination directory"
	fi
	case "$1" in
			exitout) msgFunc norm "";;
			DEST1) msgFunc norm "$Destination1" ;;
			DEST2) msgFunc norm "$Destination2" ;;
			DEST3) msgFunc norm "$DEST3" ;;
			DEST4) msgFunc red "Path not found to directory"  ;;
			DEST5) msgFunc norm "$DEST5" ;;
			DEST6) msgFunc norm "$DEST6" ;;
			netdown) msgFunc red "Internet connectivity test to $2 failed" ;;
			fileerror) msgFunc red "File error $2"  ;;
			*) msgFunc yellow "unknown input to error handler";;
	 esac
	msgFunc yellow "Goodbye $USER!"
	msgFunc anykey "and exit."
	if [ "$1" = "exitout" ]
	then
		#non-error exit
		exit 0
	fi 
	exit 1
}

#FUNCTION HEADER
# NAME : DisplayFunc
# DESCRIPTION : Function to display main menu
function DisplayFunc
{
msgFunc blue "Main Menu:"
	local choiceMainVar
	local optionsMArr=(
	"Updates" \
	 "System Maintenance" \
	"System backup" "System Security"  \
	"xterm terminal" "View/Edit config file"\
	  "System information" "Cylon information"  "Exit"\
	)
	select choiceMainVar in "${optionsMArr[@]}"
	do
	case "$choiceMainVar" in
			"${optionsMArr[0]}")   # update menu for deb
				debupdateFunc
			;;
			"${optionsMArr[1]}") #system maintenance
				SystemMaintFunc 
			;;
			"${optionsMArr[2]}")  #Full system backup
				SystemBackFunc 
			;;
			"${optionsMArr[3]}")  #System security
				SystemSecFunc "$@"
			;;

			"${optionsMArr[4]}")  # open a terminal
				xterm -e "cd $DEST3  && /bin/bash"
				msgFunc anykey
			;;
			"${optionsMArr[5]}")   #config file edit or view
				readconfigFunc "USERCALL"
			;;
			"${optionsMArr[6]}") #system info
				HelpFunc "SYS"
			;;
			"${optionsMArr[7]}")  # cylon info and cat readme file to screen 
				HelpFunc "HELP"
			;;
			*)#exit
				exitHandlerFunc exitout 
			;;
	esac
	break
	done

}

#FUNCTION HEADER
# NAME :            HelpFunc
# DESCRIPTION :     two sections one prints various system information the
# other cylon information and the installed readme file
# INPUTS : $1 process name either HELP or SYS    
# OUTPUTS : n/a
# PROCESS :[1] HELP =cylon info [2] SYS   =system info
function HelpFunc 
{
clear
msgFunc line
	if [ "$1" = "HELP" ]
		then
		msgFunc green "Cylon information and readme.md file  display." 
		msgFunc line 
		#Program details print
		cat <<-EOF
		Cylon is an Arch Linux maintenance CLI program written in Bash script.
		This program provides numerous tools to Arch Linux users to carry 
		out updates, maintenance, system checks, backups and more. 
		EOF
		msgFunc norm "Written by G.Lyons, Reports to  <glyons66@hotmail.com>"
		msgFunc norm "Version=$(dpkg -s cylon 2> /dev/null | grep Version)"
		msgFunc norm "Cylon program location = $(which cylon)"
		msgFunc norm "Cylon modules for functions = /usr/lib/cylon/modules/*"
		msgFunc norm "Folder for Cylon output data = $DEST3"
		msgFunc norm "Location of cylonCfg.conf = $DEST5"
		msgFunc norm "Location of readme.md changlog.md = $DEST6"
		msgFunc norm "Location of License.md = /usr/share/licenses/cylon"
		msgFunc norm "Desktop entry and icon also installed"
		if [ -z "${CYLONDEST}" ]
		then 
			msgFunc norm "Environment variable CYLONDEST is not Set"
		else 
			msgFunc norm "Environment variable CYLONDEST is set to $CYLONDEST"
		fi
		msgFunc anykey "and check which dependencies are installed"
		clear
		msgFunc norm " "
		msgFunc green "Dependencies"
		local gdriveVar=""
		gdriveVar=$(which gdrive)
		if [ -z $gdriveVar ]
		then 
			msgFunc red "gdrive is not installed" 
		else 
			msgFunc norm "gdrive is installed"
		fi
		# Aptitude package mangement utility
		checkPacFunc aptitude
		# deborphan utility
		checkPacFunc deborphan
		#netcat-openbsd(optional) – used for checking network
		checkPacFunc netcat
		#ccrypt (optional) – Encrypt and decrypt files
		checkPacFunc ccrypt
		#rsync (optional) – backup utility
		checkPacFunc rsync
		#inxi (optional) – CLI system information script 
		checkPacFunc inxi
		#htop (optional) – Command line system information script 
		checkPacFunc htop
		msgFunc green "Do you want to view readme [y/n] ?"
		if msgFunc yesno
			then #yes
				msgFunc line
				msgFunc green "Displaying cylonReadme.md file at $DEST6"
				cd "$DEST6"  || exitHandlerFunc DEST6
				more Readme.md 
				msgFunc green "Done!" 
				msgFunc line
				msgFunc anykey
		fi
		clear
		return
	fi

msgFunc green "System Information display"
msgFunc line

msgFunc green "Computer Information"
msgFunc norm "Uptime = $(uptime -p)"
msgFunc norm "Kernal = $(uname -svr)"
msgFunc norm "Operating System = = $(uname -mo)"
msgFunc norm "Network node name = $(uname -n)"
msgFunc norm "User name = $USER"
msgFunc norm "Screen Resolution = $(xrandr |grep "\*" | cut -c 1-15)"
msgFunc norm "CPU = $(grep name /proc/cpuinfo  | tail -1)"
mem=($(awk -F ':| kB' '/MemTotal|MemAvail/ {printf $2}' /proc/meminfo))
memused="$((mem[0] - mem[1]))"
memused="$((memused / 1024))"
memtotal="$((mem[0] / 1024))"
memory="${memused}MB / ${memtotal}MB"
msgFunc norm "RAM used/total = ($memory)"
msgFunc anykey
clear

msgFunc green "Installed Packages Information"
msgFunc yellow "TODO  n/a 30-11-17" 
msgFunc anykey
clear

}

#FUNCTION HEADER
# NAME :           readconfigFunc
# DESCRIPTION:read the config file into program if not there   
#use hardcoded defaults config file is for paths for backup function
#Called when needed by program also can be called by user option or main menu
# passed USERCALL
# INPUTS $1 USERCALL when called by user
# OUTPUTS : sets paths for backup function 
# PROCESS : read $DEST5/cylonCfg.conf
#NOTES :   file is optional       
function readconfigFunc
{
	#check input if called by user from menu or option
	if [ "$1" = "USERCALL" ]
		then
		cd "$DEST5"  || exitHandlerFunc DEST5
		if [ -f "$DEST5/cylonCfg.conf" ] 
			then
				local choiceCCVar
				msgFunc green "Do you want to edit or view? [e/V]"
				read -r choiceCCVar
				if [ "$choiceCCVar" = "e" ]
					then
						nano  "$DEST5/cylonCfg.conf" || exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
						clear
						msgFunc green "Exiting config file edit option"
						msgFunc anykey "and exit cylon."
						exit 0
					else
					msgFunc green  "Custom paths read from file"
					cat "$DEST5/cylonCfg.conf" || exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
					msgFunc green "Done!"
					msgFunc anykey
					return
				fi
			else
				exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
		fi
	fi
	
	#read cylon.conf for system back up paths 
	msgFunc green "Reading config file cylonCfg.conf at:-"
	msgFunc norm "$DEST5"
	#check if file there if not use defaults.
	if [ ! -f "$DEST5/cylonCfg.conf" ]
		then
		msgFunc red "No config found: Use the default hardcoded paths"
		#path for an internal hard drive backup
		Destination1="/run/media/$USER/Linux_backup/foo"
		#path for an external hard drive backup
		Destination2="/run/media/$USER/iomega_320/foo"
		#default paths for gdrive sync uploads 
		gdriveSource1="$HOME/Documents"
		gdriveDest1="0B3_YYYfoo"
		gdriveSource2="$HOME/Pictures"
		gdriveDest2="0B3_XXXXfoo"
		gdriveSource3="$HOME/Videos"
		gdriveDest3="0B7_XXXXYYYfoo"
		gdriveSource4="$HOME/.config"
		gdriveDest4="0B1_XXXYYYfoo"
		#paths for rsync option
		rsyncsource="$HOME/"
		rsyncDest="/run/media/$USER/Linux_backup/foo"
		#ccyptfile
		myccfile="/foo/foo/XXXX"
		msgFunc green "Done!"
		return
	fi
	cd "$DEST5"  || exitHandlerFunc DEST5
	# shellcheck disable=SC1091
	source ./cylonCfg.conf || exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
	msgFunc green  "Custom paths read from file"
	cat ./cylonCfg.conf || exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
	msgFunc green "Done!"
}

#FUNCTION HEADER
# NAME :           checkinputFunc
# DESCRIPTION:CHECK INPUT OPTIONS from linux command line arguments passed to program on call
# INPUTS :  $1 user input option
#-v display version and exit
#-s display system info and exit
#-h display cylon info and exit 
#-c open config file for edit.
#-u update all
#-d run bleachbit default as set in GUI
#-b run the bleachbit function
function checkinputFunc
{
case "$1" in
	"");;

	-c|--config)
		readconfigFunc "USERCALL"
		;;

	-v|--version)
		msgFunc green "Version=$(dpkg -s cylon 2> /dev/null | grep Version)"
		;;
	-s|--system)
		HelpFunc SYS
		;;
	-h|--help)
		HelpFunc HELP
		;;
	-m|--maint)
		SystemMaintAutoFunc
	;;
	-p|--print)
		pkglistFunc
	;;
	*)	msgFunc red    "Invalid option!"
		msgFunc yellow "Usage:  -c  -h -m -p  -s -v "
		msgFunc yellow "See readme.md for details at cylon -h "
	;;
esac
#was there a input if yes quit?
if [ -n "$1" ] 
	then
		exit 0 
fi
clear
}

#FUNCTION HEADER
# NAME : makeDirFunc
# DESCRIPTION :  makes a directory with time/date stamp and enters it
#Directory used for program output and backups. 
# INPUTS : $1 text is appended to name  $2 bit flag  to change dir or not
function makeDirFunc
{
			local dirVar=""
			#makes dirs for output appends passed text to name
			#check if coming from system backup other path 1 yes 0 no.
			if [ "$2" != 1 ]
				then 
				cd "$DEST3" || exitHandlerFunc DEST3
			fi
			dirVar=$(date +%H%M-%d%b%y)"$1"
			mkdir "$dirVar"
			cd "$dirVar" || exitHandlerFunc DEST4
			msgFunc norm "Directory for output made at:-"
			pwd	 
}


