#!/bin/bash
#module containing functions called from cylon package
#Functions networkFunc and checknetFunc

#FUNCTION HEADER
# NAME :           networkFunc
# DESCRIPTION: provides network functions
# PROCESS : See options array
function networkFunc
{
	clear        
	local choiceNVar=""
	 #change dir for log files
	 makeDirFunc "-NETINFO"
	msgFunc norm "Files report will be written to path above -"
	msgFunc blue "Network. options:-"
				local optionsNArr=("$(checkPacFunc wavemon NOMES) -wireless network monitor" "$(checkPacFunc speedtest-cli  NOMES) -testing internet bandwidth"\
				"Check if website up with netcat and ping" "ip addr" "netstat -r & route" "Check the status of UFW  Uncomplicated Firewall" "Return")
				select choiceNVar in "${optionsNArr[@]}"
				do
				case "$choiceNVar" in  
					"${optionsNArr[0]}") #wavemon - wireless network monitor"
					#check wavemon is installed
					if ! checkPacFunc wavemon 
					then
						msgFunc anykey 
					return
					fi
					msgFunc green "Opening wavemon"
					xterm -e "wavemon" &  
					;;
					
					"${optionsNArr[1]}")  #speedtest-cli testing internet bandwidth
					#check speedtest-cli  is installed
					if ! checkPacFunc speedtest-cli
					then
						msgFunc anykey 
					return
					fi
					local ServerIDVar=""
					msgFunc green "Speedtest-cli"
					msgFunc norm "Do you want to generate server list [y/n] ?"
									if msgFunc yesno
									then # yes
											msgFunc green "List speedtest.net servers sorted by distance sent to file, cat top 20"
											speedtest-cli --list > stclilist
											head -n20 stclilist 
									fi		
									msgFunc norm "Do you want to specify a server ID [y/n] ?"
									if msgFunc yesno
										then #yes
											msgFunc norm "Enter Server ID from list"
											read -r ServerIDVar
											clear
											speedtest-cli --server "$ServerIDVar" | tee stclilog
											return
									fi		
					clear
					msgFunc green "Running Speedtest-cli "
					speedtest-cli  | tee stclilog
					;;
					
					"${optionsNArr[2]}")  #netcat 
					local websiteVar=""
					msgFunc green "Check if website up with netcat "
					msgFunc norm "Enter website"
					read -r websiteVar
					msgFunc norm " "
					checkNetFunc "$websiteVar"
					msgFunc norm " "
					ping -c 10 "$websiteVar"

					;;
					"${optionsNArr[3]}")  #ip a
						ip a | tee ifconfiglog
					;;
					"${optionsNArr[4]}")  #netstat  andview route table
						netstat -r 
						route
					;;
					"${optionsNArr[5]}") #check firewall status
					sudo ufw status verbose
					;;
					*)  #exit  
						msgFunc green "Done!"	
					return
					;;
				esac
				break
				done
				msgFunc green "Done!"	
}

#FUNCTION HEADER
# NAME :  checkNetFunc 
# DESCRIPTION: checks network with netcat 
#INPUTS $1 a website URL
function checkNetFunc
{
#checks network with netcat 
#check netcat is installed
	if ! checkPacFunc gnu-netcat  
	then
		if ! checkPacFunc openbsd-netcat 
		then
			msgFunc yellow "Install gnu-netcat or openbsd-netcat for Network check"
			msgFunc anykey 
			exitHandlerFunc exitout
		fi
	fi
	#This uses netcat (nc) in its port scan mode, 
	#a quick poke (-z is zero-I/O mode [used for 
	#scanning]) with a quick timeout 
	#(-w 1 waits at most one second
	#It checks passed website $1 on port 80 (HTTP).
	if nc -zw1 "$1" 80; then
		msgFunc norm   "We have connectivity $1"
	else
		exitHandlerFunc netdown "$1"
	fi

}
